#主题#
*zh: 跨域 
*en: (CORS) (cross-origin resource sharing)

#概念#
*zh: 不同服务器间访问、共享数据 
*en: open access across domain-boundaries 

*zh: 是W3C的一个标准 
*en: a W3C specification 

*zh: 一套机制 
*en: a standard mechanism that can be used by all browsers for implementing cross-domain requests

*zh: 建立在XMLHttpRequest对象上 
*en: build on top of XMLHttpRequest object

----------------^_^微笑分割线^_^----------------

#浏览器支持#
* 通过CAN I USE 网站查看浏览器支持
* [site: https://www.caniuse.com/#home；keyword: Cross-Origin Resource Sharing]

* W3C 
* [SITE:https://www.w3.org/TR/cors/; 跨域的标准文件]

* 其他网站
*[site: https://enable-cors.org/]

* 支持情况
* [Chrome 3+, Firefox 3.5+, Opera 12+, Safari 4+, Internet Explorer 8+]

----------------^_^微笑分割线^_^----------------

#起源#
*zh: 浏览器的同源策略，导致了不同域名间的应用不能通过接口请求访问、共享数据
*en: the browser same-origin policy prevents javascript from making requests across domain boundaries.

----------------^_^微笑分割线^_^----------------
#API#
 $API实现$
  * XMLHttpRequest(ie10+) 
  * ActiveXObject(ie6-) 
  * XDomainRequest(ie8-9); 
 $API树$
  * EventTarget<--XMLHttpRequestEventTarget<--XMLHttpRequest
 $API支持协议$
  * HTTP, FILE://, FTP
 $构造方法$
  * XMLHttpRequest()
 $属性$
  * status:      //200 
  * statusText:  //'OK'
  * readyState 
  //0 UNSENT 实例化XMLHttpRequest, 
  //1 OPENED open方法被调用, 
  //2 HEADERS_RECEIVED send方法被调用，头部和状态可以获取, 
  //3 LOADING 下载中， responseText有数据, 
  //4 DONE 下载操作已完成
 
  * responsType
  //'' 等价于 'text', 是默认字符串
  //'arraybuffer', 包含二进制数据 ArrayBuffer对象
  //'blob', 包含二进制数据 Blob对象
  //'document', HTML Document 或者 XML XMLDocument
  //'json', JSON对象

  * response        //返回的数据
  * responseText    //返回的数据
  * responseXML     //响应的xml数据
  * responseURL     //不包含锚点（#）
  * timeout         //超时时间
  * withCredentials //跨域

  * upload //返回一个上传对象 XMLHttpRequestUpload
  //onloadstart	获取开始 XMLHttpRequestUpload事件
  //onprogress	数据传输进行中 XMLHttpRequestUpload事件
  //onabort	获取操作终止 XMLHttpRequestUpload事件
  //onerror	获取失败 XMLHttpRequestUpload事件
  //onload	获取成功 XMLHttpRequestUpload事件
  //ontimeout	获取操作在用户规定的时间内未完成 XMLHttpRequestUpload事件
  //onloadend XMLHttpRequestUpload事件
 

 $方法$
  * 初始化一个请求
   open(
     String:method,           //POST GET ...
     String:url,              //请求接口
     Boolean:async,           //请求模式，可选； true异步，false同步
     [String,Number]:user,    //用户验证的用户账号，可选
     [String,Number]:password //用户验证的用户密码，可选
    ) 

  * 发送请求
   send([
     '',              //不发送任何数据
     ArrayBuffer,
     ArrayBufferView,
     Blob,
     Document,       //需要序列化改文档 
     DOMString,
     FormData
   ]) 

  * abort() 终止请求
  * setRequestHeader(name,value) %tip% 设置头部，在open 和 send之间调用
  * getAllResponseHeader()
  * getResponseHeader(name)
  * overrideMimeType()

 $事件$
  * abort     //请求被终止时
  * error     //当请求错误时
  * load      //请求成功完成时
  * timeout   //预设时间内没有接收到响应时触发
  * loadstart //请求开始前
  * progress  //数据传输中
  * loadend   //请求完成
  %tip% 必须在open前添加事件, onreadystatechange准确来说是一个属性，而不是一个事件

 $事件执行顺序
  * onreadystatechange //如果同时设置了改属性
  * loadstart
  * onreadystatechange //如果同时设置了改属性
  * onreadystatechange //如果同时设置了改属性
  * progress
  * onreadystatechange //如果同时设置了改属性
  * load
  * loadend
  
----------------^_^微笑分割线^_^----------------

#跨域请求的分类#
*zh: 简单跨域请求
*en: simple request
 $简单跨域请求$
  * 请求的方法是GET,HEAD,POST，且Content-Type是application/x-www-form-urlencoded, multipart/form-data 或 text/plain中的一个值
  * 请求中没有自定义的HTTP头部
 $流程$
  * step 1 
  浏览器：把客户端脚本所在的域填充到Origin里，向其他域的服务器请求资源
  * step 2
  服务器：根据资源权限配置，在响应头中添加Access-Control-Allow-Origin，返回结果
  * step 3
  浏览器：比较服务器返回的Access-Control-Allow-Origin 和请求域的Origin,如果当前域已经得到授权，则将结果返回给页面。否则浏览器忽略此次响应
 $总结$
  * 对于简单的跨域请求，只要服务器设置的Access-Control-Allow-Origin = '*'

*zh: 带预检(Preflighted)的跨域请求
*en: not simple request
 $带预检(Preflighted)的跨域请求$
  * 请求的方法不是 GET, HEAD或者POST三种或者是这三种，但是Content-Type不是application/x-www-form-urlencoded, multipart/form-data或text/plain中的一种
  * 请求中有自定义HTTP头部
 $流程$
  * step 1 
  浏览器：向服务器发送一个OPTIONS预检请求
  * step 2
  服务器：响应OPTIONS请求，会在responseHead里添加Access-Control-Allow-Methods，Access-Control-Allow-Origin，Access-Control-Allow-Headers，Access-Control-Max-Age
  * step 3
  浏览器：接到OPTIONS的响应，比较真实请求的method是否属于返回的Access-Control-Allow-Methods的值之一，还有origin也会进行比较是否匹配
        预检测失败就会报错
          1.1请求来源不被options响应允许 
            Response to preflight request doesn't pass access control check: No 'Access-Control-Allow-Origin'
          1.2请求方法不被options响应允许
            Method PUT is not allowed by Access-Control-Allow-Methods in preflight response
          1.3请求中有自定义header不被options响应允许
            Request header field myHeader is not allowed by Access-Control-Allow-Headers in preflight response
  * step 4
  服务器：响应真实请求
  * step 5
  浏览器：接受服务器对真实请求的返回结果，返回给网页
  $总结$
   *Access-Control-Allow-Methods和Access-Control-Allow-Headers只在响应options请求时有作用

 %tip% XMLHttpRequest支持通过withCredentials属性跨域请求携带身份信息(Credential，例如Cookie或者HTTP认证信息)。
       浏览器将携带Cookie Header的请求发送到服务器端后
       如果服务器没有响应Access-Control-Allow-Credentials，那么浏览器会忽略掉这次响应
       如果服务器设置Access-Control-Allow-Credentials为true，那么就不能再设置Access-Control-Allow-Origin为*,必须用具体的域名。


#客户端#
* step 1 
实例化一个XMLHttpRequest对象
var xhr = new XMLHttpRequest()

* step 2 
添加事件监听
xhr.addEventListener('event-type', handler) 或者 xhr.on +'event-type' = function(){}

* step 3 
设置响应数据的类型 ，默认是''
xhr.responsType = 'json' 

* step 4 
设置开启认证 (可选，默认不用开启)
xhr.withCredentials = true

* step 5 
打开一个请求
xhr.open(method,url,async,user,password);

* step 6 
设置请求头，如果有需要的话
xhr.setRequestHeader(name,value)

* step 7 
发送请求
xhr.send(data)

----------------^_^微笑分割线^_^----------------

#服务器端#
* Access-Control-Allow-Origin = '*'
* Access-Control-Allow-Credentials = true
* Access-Control-Allow-Methods = 'GET,POST OPTION,PUT'
* Access-Control-Allow-Headers = 'Content-Type'   //请求头中的name
%tip% 当withCredentials=true时Access-Control-Allow-Origin不能设置成'*'，必须时具体的origin

----------------^_^微笑分割线^_^----------------

#jQuery 跨域#
$.ajax(option) 支持跨域和非跨域请求

option = {
  async: true,                        //是否异步
  type: 'GET',                        //请求方法
  url: 'https://www.baidu.com'        //请求接口
  timeout: 6000,                      //请求超时时间
  contentType: 'text/plain',          //数据到服务器时所使用的内容类型
  dataType: 'json',                   //返回的数据类型
  data: {}                            //发送的数据
  success: function(data){},
  error: function(){}
}

----------------^_^微笑分割线^_^----------------

#常见问题#
* 会先发送一个OPTION类型的预请求，接着才会发送正式的请求